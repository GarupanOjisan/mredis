// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SortedSetClient is the client API for SortedSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortedSetClient interface {
	// add a new member
	ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*ZAddResponse, error)
	// get the ranking sorted by ascending order
	ZRank(ctx context.Context, in *ZRankRequest, opts ...grpc.CallOption) (*ZRankResponse, error)
}

type sortedSetClient struct {
	cc grpc.ClientConnInterface
}

func NewSortedSetClient(cc grpc.ClientConnInterface) SortedSetClient {
	return &sortedSetClient{cc}
}

func (c *sortedSetClient) ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*ZAddResponse, error) {
	out := new(ZAddResponse)
	err := c.cc.Invoke(ctx, "/SortedSet/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sortedSetClient) ZRank(ctx context.Context, in *ZRankRequest, opts ...grpc.CallOption) (*ZRankResponse, error) {
	out := new(ZRankResponse)
	err := c.cc.Invoke(ctx, "/SortedSet/ZRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SortedSetServer is the server API for SortedSet service.
// All implementations must embed UnimplementedSortedSetServer
// for forward compatibility
type SortedSetServer interface {
	// add a new member
	ZAdd(context.Context, *ZAddRequest) (*ZAddResponse, error)
	// get the ranking sorted by ascending order
	ZRank(context.Context, *ZRankRequest) (*ZRankResponse, error)
	mustEmbedUnimplementedSortedSetServer()
}

// UnimplementedSortedSetServer must be embedded to have forward compatible implementations.
type UnimplementedSortedSetServer struct {
}

func (UnimplementedSortedSetServer) ZAdd(context.Context, *ZAddRequest) (*ZAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (UnimplementedSortedSetServer) ZRank(context.Context, *ZRankRequest) (*ZRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRank not implemented")
}
func (UnimplementedSortedSetServer) mustEmbedUnimplementedSortedSetServer() {}

// UnsafeSortedSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortedSetServer will
// result in compilation errors.
type UnsafeSortedSetServer interface {
	mustEmbedUnimplementedSortedSetServer()
}

func RegisterSortedSetServer(s grpc.ServiceRegistrar, srv SortedSetServer) {
	s.RegisterService(&SortedSet_ServiceDesc, srv)
}

func _SortedSet_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortedSetServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SortedSet/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortedSetServer).ZAdd(ctx, req.(*ZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SortedSet_ZRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortedSetServer).ZRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SortedSet/ZRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortedSetServer).ZRank(ctx, req.(*ZRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SortedSet_ServiceDesc is the grpc.ServiceDesc for SortedSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SortedSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SortedSet",
	HandlerType: (*SortedSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZAdd",
			Handler:    _SortedSet_ZAdd_Handler,
		},
		{
			MethodName: "ZRank",
			Handler:    _SortedSet_ZRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/sortedset.proto",
}
