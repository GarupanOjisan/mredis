// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StackClient is the client API for Stack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackClient interface {
	// Push value
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	// pop value
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
}

type stackClient struct {
	cc grpc.ClientConnInterface
}

func NewStackClient(cc grpc.ClientConnInterface) StackClient {
	return &stackClient{cc}
}

func (c *stackClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/Stack/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := c.cc.Invoke(ctx, "/Stack/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServer is the server API for Stack service.
// All implementations must embed UnimplementedStackServer
// for forward compatibility
type StackServer interface {
	// Push value
	Push(context.Context, *PushRequest) (*PushResponse, error)
	// pop value
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	mustEmbedUnimplementedStackServer()
}

// UnimplementedStackServer must be embedded to have forward compatible implementations.
type UnimplementedStackServer struct {
}

func (UnimplementedStackServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStackServer) Pop(context.Context, *PopRequest) (*PopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedStackServer) mustEmbedUnimplementedStackServer() {}

// UnsafeStackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServer will
// result in compilation errors.
type UnsafeStackServer interface {
	mustEmbedUnimplementedStackServer()
}

func RegisterStackServer(s grpc.ServiceRegistrar, srv StackServer) {
	s.RegisterService(&Stack_ServiceDesc, srv)
}

func _Stack_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stack/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stack/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stack_ServiceDesc is the grpc.ServiceDesc for Stack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Stack",
	HandlerType: (*StackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Stack_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Stack_Pop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/stack.proto",
}
